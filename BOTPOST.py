import telebot
import requests
from telebot import types
from telebot.types import InputMediaPhoto
from config import token
import json
from random import randint
import threading
from config import user, token, pars, button1, button2, button3, button4, pars_day, chisa,all_para, settings, nazad, btn1, btn2, btn3, btn4, moi_zametki, budil, zaderch, perv_para, admins, soglas
from baza import SQLt
import datetime 
import time
def kuda(target):
    pmes=bot.send_message(target, '–î–ó–´–´–´–´–´–´–ù–¨üîî')
    time.sleep(5)
    for i in range(5):
        try:
            bot.delete_message(target, pmes.message_id)
        except:
            pass          
        pmes=bot.send_message(target, '–î–ó–´–´–´–´–´–´–ù–¨üîî')
        time.sleep(5)
        try:
            bot.delete_message(target, pmes.message_id)
        except:
            pass        
def kostil():
    while True:
        try:
            BD=SQLt()
            a=datetime.datetime.now()
            timer=a.hour*60+a.minute
            while BD.budilka(timer)!="0":
                ider=int(BD.budilka(timer))
                if BD.get_zaderzh(ider)!=0:
                    t2 = threading.Thread(target=kuda(ider))
                    BD.set_budil(ider, perv_para(datetime.date.today().isoweekday()+1,pars(BD.get_id_group(ider)),chisa())-int(BD.get_zaderzh(ider)))
                    t2.start()
                else:
                    BD.set_budil(ider, 0)
                    BD.close()                    
            BD.close()
        except:
            try:
                BD=SQLt()
                a=datetime.datetime.now()
                timer=a.hour*60+a.minute                
                ider=int(BD.budilka(timer))
                BD.set_budil(ider, perv_para(datetime.date.today().isoweekday()+1,pars(BD.get_id_group(ider)),chisa())-int(BD.get_zaderzh(ider)))
                BD.close()
            except:
                BD.close()
                pass
            pass
        time.sleep(60)    
try:
    BD = SQLt()
    BD.nachalo()
    BD.close()
except:
    pass
bot = telebot.TeleBot(token)
@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(message)
    BD = SQLt()
    if BD.counts_users_for(message) == 0:
        BD.close()
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥–∞—é —Å—Ç—É–¥–µ–Ω—Ç–∞–º –ú–ì–¢–£ —É–∑–Ω–∞—Ç—å –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –∫–∞—Ñ–µ–¥—Ä—É:\n‚ÄºÔ∏è–§–æ—Ä–º–∞—Ç: –ò–£5-35–ë')
        bot.register_next_step_handler(message, get_user_group)
    else:
        gh = open('photo/Nachalo.jpg', "rb")
        BD = SQLt()
        bot.send_photo(message.chat.id, gh, caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É –≤–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ?", reply_markup=user())
        BD.close()
@bot.message_handler(content_types=['text'])
def main_message(message):
    BD = SQLt()
    print(message)
    
    if message.text == nazad:
        gh = open('photo/Nachalo.jpg', "rb")
        bot.send_photo(message.chat.id, gh, caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É –≤–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ?", reply_markup=user())
        BD.close()     
    elif message.text == "123":
        bot.send_message(message.chat.id, BD.get_id_group(message.chat.id))
        a=datetime.datetime.now()
        timer=a.hour*60+a.minute        
        BD.set_budil(message.chat.id,timer+1)
        bot.send_message(message.chat.id, BD.get_id_budil(message.chat.id))
        BD.close()
    elif message.text == "#$%#$:@#$%^&@" and message.chat.id in admins:
        bot.send_message(message.chat.id, "–Ø —Å–ª—É—à–∞—é")
        t2 = threading.Thread(target=kostil())
        t2.start()            
    elif message.text=="Test_dzin":
        t2 = threading.Thread(target=kuda(message.chat.id))
        t2.start()
  
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == button1:
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            pmes = bot.send_message(call.message.chat.id,str(pars_day(datetime.date.today().isoweekday(),pars(BD.get_id_group(call.message.chat.id)),chisa())),reply_markup=user()) 
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close()   
        elif call.data == button2:
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            pmes = bot.send_message(call.message.chat.id,str(pars_day(datetime.date.today().isoweekday()+1,pars(BD.get_id_group(call.message.chat.id)),chisa())),reply_markup=user())
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close()
        elif call.data == button3:
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            q=all_para(pars(BD.get_id_group(call.message.chat.id))).split("%#%")
            for i in range(len(q)-1):
                bot.send_message(call.message.chat.id,str(q[i])) 
            gh = open('photo/Nachalo.jpg', "rb")
            pmes=bot.send_photo(call.message.chat.id, gh, caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É –≤–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ?", reply_markup=user())
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close()     
        elif call.data == button4:
            gh = open('photo/Nachalo.jpg', "rb")
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            pmes=bot.send_photo(call.message.chat.id, gh, caption="–ß—Ç–æ –≤–∞–º —É–≥–æ–¥–Ω–æ?", reply_markup=settings())
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close()
        elif call.data == btn1:
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass            
            if BD.get_zaderzh(call.message.chat.id)==0:
                pmes=bot.send_message(call.message.chat.id, '–≠—Ç–æ –Ω–µ –æ–±—ã—á–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫, –∞ –º–∞–≥–∏—á–µ—Å–∫–∏–π!üßôüèª\n –í –Ω–µ–º –Ω–µ –Ω—É–∂–Ω–æ –≤–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –æ–Ω –∑–∞–∑–≤–æ–Ω–∏—Ç, –æ–Ω —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∑–∞ n –º–∏–Ω—É—Ç –¥–æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã –≤ –¥–Ω–µ!‚Äç',reply_markup=budil())
                BD.set_pmes(pmes.message_id,call.message.chat.id)
            else:
                pmes=bot.send_message(call.message.chat.id, '–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫ –∏ —Å–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ –±—É–¥–∏–ª—å–Ω–∏–∫–∞',reply_markup=zaderch())
                BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close()
        elif call.data == btn2:
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            pmes=bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ')
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            bot.register_next_step_handler(call.message, new_name_zametka)
            BD.close()
        elif call.data == btn3:
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            pmes=bot.send_message(call.message.chat.id, '‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –∫–∞—Ñ–µ–¥—Ä—É:\n‚ÄºÔ∏è–§–æ—Ä–º–∞—Ç: –ò–£5-35–ë')
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            bot.register_next_step_handler(call.message, reset_user_group)
            BD.close()
        elif call.data == btn4:
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            pmes=bot.send_message(call.message.chat.id, '–ö–∞–∫—É—é –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å?', reply_markup=moi_zametki(call.message.chat.id,BD.get_zametka_dates(call.message.chat.id)))
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close()        
        elif call.data == 'üîô –ù–∞–∑–∞–¥':
            gh = open('photo/Nachalo.jpg', "rb")
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            pmes=bot.send_photo(call.message.chat.id, gh, caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É –≤–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ?", reply_markup=user())
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close()
        elif "#1@3$" in call.data and "üòâ" not in call.data and "üò°" not in call.data:
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            gh = open('photo/Nachalo.jpg', "rb")
            pmes=bot.send_photo(call.message.chat.id, gh, caption="–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞:\n"+str(BD.get_zametka(call.data)), reply_markup=nazad(call.data))
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close()  
        elif "#1@3$" in call.data and "üòâ" in call.data:
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            gh = open('photo/Nachalo.jpg', "rb")
            pmes=bot.send_photo(call.message.chat.id, gh, caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã?", reply_markup=soglas(call.data[1:]))
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close()  
        elif "#1@3$" in call.data and "üò°" in call.data:
            BD = SQLt()
            BD.set_new_zametka(call.data[:-1],"")
            d=list(BD.get_zametka_dates(call.message.chat.id).split())
            d[int(call.data.split("#1@3$")[1][:-1])-1]="%^&@#"
            q=" ".join(d)
            BD.set_zametka_dates(call.message.chat.id,q)
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            pmes=bot.send_message(call.message.chat.id, '–ö–∞–∫—É—é –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å?', reply_markup=moi_zametki(call.message.chat.id,BD.get_zametka_dates(call.message.chat.id)))
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close()          
        elif call.data=="üòâ–ù–∞–∑–∞–¥üòâ":
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass
            pmes=bot.send_message(call.message.chat.id, '–ö–∞–∫—É—é –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å?', reply_markup=moi_zametki(call.message.chat.id,BD.get_zametka_dates(call.message.chat.id)))
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close() 
        elif call.data=="–ù–∞–∑–∞–¥":
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass    
            gh = open('photo/Nachalo.jpg', "rb")
            pmes=bot.send_photo(call.message.chat.id, gh, caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É –≤–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ?", reply_markup=user())
            BD.set_pmes(pmes.message_id,call.message.chat.id)
            BD.close()  
        elif call.data=="ZADERSCH":
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass               
            pmes=bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å‚Äç')
            BD.set_kek(call.message.chat.id,1)
            BD.set_pmes(pmes.message_id,call.message.chat.id) 
            bot.register_next_step_handler(call.message, budilnik)
            BD.close()
        elif call.data=="SNAT":
            BD = SQLt()
            try:
                bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            except:
                pass               
            BD.set_zader(call.message.chat.id, int(0))
            gh = open('photo/Nachalo.jpg', "rb")
            pmes=bot.send_photo(call.message.chat.id, gh, caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É –≤–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ?", reply_markup=user())
            BD.set_pmes(pmes.message_id,call.message.chat.id)            
            BD.close()
            

@bot.message_handler(content_types=['text'])
def get_user_group(message):
    try:
        if "-" in message.text and message.text.count("-")==1:
            a=pars(message.text.upper())
            if a==[]:
                bot.send_message(message.chat.id, "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –∫–∞—Ñ–µ–¥—Ä—É:\n‚ÄºÔ∏è–§–æ—Ä–º–∞—Ç: –ò–£5-35–ë")
                bot.register_next_step_handler(message, get_user_group)
            else:
                BD=SQLt()
                BD.new_user(message.chat.id,message.text.upper())
                bot.send_message(message.chat.id, "‚å®Ô∏è –°–ø–∞—Å–∏–±–æ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—Å!\n –ò –ø–æ–º–Ω–∏—Ç–µ, –∏–º–ø–µ—Ä–∏—è –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –≤–∞—Å)")
                bot.register_next_step_handler(message, main_message)
                gh = open('photo/Nachalo.jpg', "rb")
                pmes=bot.send_photo(message.chat.id, gh, caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É –≤–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ?", reply_markup=user())
                BD.set_pmes(pmes,message.chat.id)                
                BD.close()

        else:
            bot.send_message(message.chat.id, "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –∫–∞—Ñ–µ–¥—Ä—É:\n‚ÄºÔ∏è–§–æ—Ä–º–∞—Ç: –ò–£5-35–ë")
            bot.register_next_step_handler(message, get_user_group)

    except:
            bot.send_message(message.chat.id, "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –∫–∞—Ñ–µ–¥—Ä—É:\n‚ÄºÔ∏è–§–æ—Ä–º–∞—Ç: –ò–£5-35–ë")
            bot.register_next_step_handler(message, get_user_group)
    
@bot.message_handler(content_types=['text'])
def budilnik(message):
    try:
        if message.text.isdigit() and int(message.text)!=0:
            BD=SQLt()
            bot.send_message(message.chat.id, "‚è±Ô∏è –ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            BD.set_zader(message.chat.id, int(message.text))
            BD.set_budil(message.chat.id, perv_para(datetime.date.today().isoweekday()+1,pars(BD.get_id_group(message.chat.id)),chisa()-int(message.text)))
            gh = open('photo/Nachalo.jpg', "rb")
            pmes=bot.send_photo(message.chat.id, gh, caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É –≤–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ?", reply_markup=user())
            BD.set_pmes(pmes,message.chat.id)                
            BD.close()
        elif message.text.isdigit() and int(message.text)==0:
            bot.send_message(message.chat.id, "‚è±Ô∏è –ù–µ –ª–æ–º–∞–π—Ç–µ –º–∞–≥–∏—é! –î–ª—è 0 –∑–∞–¥–µ—Ä–∂–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –æ–±—ã—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏! ‚è±")
            bot.register_next_step_handler(message, budilnik)            
        else:
            bot.send_message(message.chat.id, "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å! ‚è±")
            bot.register_next_step_handler(message, budilnik)

    except Exception as e:
        raise

@bot.message_handler(content_types=['text'])
def reset_user_group(message):
    try:
        if "-" in message.text and message.text.count("-")==1:
            a=pars(message.text.upper())
            if a==[]:
                bot.send_message(message.chat.id, "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –∫–∞—Ñ–µ–¥—Ä—É:\n‚ÄºÔ∏è–§–æ—Ä–º–∞—Ç: –ò–£5-35–ë")
                bot.register_next_step_handler(message, reset_user_group)
            else:
                BD=SQLt()
                BD.set_id_group(message.chat.id,message.text.upper())
                bot.send_message(message.chat.id, "‚å®Ô∏è –°–ø–∞—Å–∏–±–æ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—Å!\n –ò –ø–æ–º–Ω–∏—Ç–µ, –∏–º–ø–µ—Ä–∏—è –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –≤–∞—Å)")
                bot.register_next_step_handler(message, main_message) 
                gh = open('photo/Nachalo.jpg', "rb")                
                pmes=bot.send_photo(message.chat.id, gh, caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É –≤–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ?", reply_markup=user())
                BD.set_pmes(pmes,message.chat.id)   
                BD.close()

        else:
            bot.send_message(message.chat.id, "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –∫–∞—Ñ–µ–¥—Ä—É:\n‚ÄºÔ∏è–§–æ—Ä–º–∞—Ç: –ò–£5-35–ë")
            bot.register_next_step_handler(message, reset_user_group)

    except:
            bot.send_message(message.chat.id, "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –∫–∞—Ñ–µ–¥—Ä—É:\n‚ÄºÔ∏è–§–æ—Ä–º–∞—Ç: –ò–£5-35–ë")
            bot.register_next_step_handler(message, get_user_group)


@bot.message_handler(content_types=['text'])
def new_name_zametka(message):
    try:
        if len(message.text.split())==1:
            try:
                BD=SQLt()
                BD.set_zametka_dates(message.chat.id,str(BD.get_zametka_dates(message.chat.id))+" "+str(message.text))
                BD.new_zametka(str(message.chat.id)+"#1@3$"+str(BD.counts_zamet_for(message.chat.id)+1),message.chat.id,"–¢—É—Ç –ø—É—Å—Ç–æ", str(datetime.date.today()))
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–∞–º—É –∑–∞–º–µ—Ç–∫—É, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
                BD.close()
                bot.register_next_step_handler(message, new_zametka)      
            except: 
                bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ")
                bot.register_next_step_handler(message, new_name_zametka)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ")
            bot.register_next_step_handler(message, new_name_zametka)

    except:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ")
            bot.register_next_step_handler(message, new_name_zametka)    



@bot.message_handler(content_types=['text'])
def new_zametka(message):
    try:
        BD=SQLt()
        BD.set_new_zametka(str(message.chat.id)+"#1@3$"+str(BD.counts_zamet_for(message.chat.id)),message.text)
        bot.send_message(message.chat.id, "‚å®Ô∏è –°–ø–∞—Å–∏–±–æ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—Å!\n –ò –ø–æ–º–Ω–∏—Ç–µ, –∏–º–ø–µ—Ä–∏—è –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –≤–∞—Å)")
        bot.register_next_step_handler(message, main_message)  
        gh = open('photo/Nachalo.jpg', "rb")
        bot.send_photo(message.chat.id, gh, caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É –≤–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ?", reply_markup=user())
        BD.close()        
    except Exception as e:
        raise
    


        
if __name__ == '__main__':
    bot.polling(none_stop=True)